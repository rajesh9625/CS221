Kai Wang's HomepageKai Wang's Homepage



        
 

Ph.D. Student 


Computer Science Department 
Donald Bren School of Computer and Information Sciences 
University of California, Irvine


Email: wangk7 at uci.edu
Office: Donald Bren Hall 3243



About me                                                                          
I am currently a second-year Ph.D. student at University of California, Irvine. My advisor is Prof. Guoqing(Harry) Xu. Before coming to UC Irvine, I completed my Master's degree in CS at Institute of Computing Technology, Chinese Academy of Sciences
I completed my undergraduate degree in CS at Huazhong Unversity of Science&Technology.
It's really a brand-new journey. Enjoy! :)

Research Interests                                                          
Programming Language, Program Analysis, Software Engineering


Current Projects                                                              



1 Facade: A compiler and runtime system for (almost)
object-bounded Big Data applications

A managed Big Data application often suffers from large space
overhead and GC cost due to extremely large numbers of objects and references
in the heap. A key observation is that, in a scalable system, the number of
heap objects representing data items cannot grow proportionally with the
dataset cardinality. We develop Facade, a Java-based compiler and runtime, that can statically bound the number of heap
objects that represent data items. Facade advocates to store
data items in native memory and create objects as facades to represent
data items. It uses a new execution model that dynamically establishes a
many-to-one mapping between an unbounded set of data items in native memory and
a statically bounded set of objects in the heap, thereby reducing significantly
the number of objects, their associated space overhead (i.e., pointers and
headers), as well as the GC cost.



 The paper is accepted by ASPLOS'15. 

 2 GraphQ: Graph query processing with abstraction refinement

GraphQ is a scalable querying framework for very large graphs. GraphQ is built on a key insight that many interesting graph properties --- such as finding cliques of a certain size, or finding vertices with a certain page rank --- can be effectively computed by exploring only a small fraction of the graph, and traversing the complete graph is an overkill. The centerpiece of our framework is the novel idea of abstraction refinement, where the very large graph is represented as multiple levels of abstractions, and a query is processed through iterative refinement across graph abstraction levels. As a result, GraphQ enjoys several distinctive traits unseen in existing graph processing systems: query processing is naturally budget-aware, friendly for out-of-core processing where ``Big Graphs'' can not entirely fit into memory, and endowed with strong correctness properties on query answers. With GraphQ, a wide range of complex analytical queries over very large graphs can be answered with resources affordable to a single PC, which is in compliant with the recent trend that advocates single-machine-based Big Data processing.  

 The paper is accepted by USENIX ATC'15. 
Publications                                                                     
1 Khanh Nguyen, Kai Wang, Yingyi Bu, Lu Fang, Jianfei Hu, and Guoqing Xu. "Facade: A Compiler and Runtime for (Almost) Object-Bounded Big Data Applications", 20th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Istanbul, Turkey, March 14-18, 2015. (Acceptance rate: 48/278, 17%)


2  Kai Wang, Guoqing Xu, Zhendong Su, and Yu David Liu. "GraphQ: Graph Query Processing with Abstraction Refinement -- Programmable and Budget-Aware Analytical Queries over Very Large Graphs on a Single PC", 2015 USENIX Annual Technical Conference, Santa Clara, CA, July 2015. (Acceptance rate: 35/221, 15.8%)

Personal Interests                                                           

Music, Movies, Skiing.